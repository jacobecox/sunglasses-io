openapi: 3.0.0
info:
  title: E-Commerce API
  description: API for managing brands, products, user authentication, and cart functionality.
  version: 1.0.0
servers:
  - url: http://localhost:3000
    description: Local development server

paths:
  /brands:
    get:
      summary: Get all brands
      description: Retrieve a list of all available brands.
      responses:
        200:
          description: A list of brands.
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    id:
                      type: integer
                      example: 1
                    name:
                      type: string
                      example: Oakley

  /products:
    get:
      summary: Get products by brand
      description: Retrieve products for a selected brand using the brand ID.
      parameters:
        - in: query
          name: brandId
          schema:
            type: integer
          required: true
          description: ID of the brand to filter products.
      responses:
        200:
          description: A list of products for the brand.
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    id:
                      type: integer
                      example: 101
                    categoryId:
                      type: integer
                      example: 1
                    name:
                      type: string
                      example: Superglasses
                    description:
                      type: string
                      example: The best glasses in the world
                    price:
                      type: number
                      format: float
                      example: 150.0
        400:
          description: Brand ID is required.
        404:
          description: No products for this brand found.

  /login:
    post:
      summary: Authenticate user and generate token
      description: Authenticate user credentials and generate a JWT token.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                  example: yellowleopard753
                password:
                  type: string
                  example: jonjon
      responses:
        200:
          description: Successfully authenticated.
          content:
            application/json:
              schema:
                type: object
                properties:
                  token:
                    type: string
        401:
          description: Invalid credentials.

  /cart:
    get:
      summary: Get user cart
      description: Retrieve the authenticated user's cart.
      security:
        - bearerAuth: []
      responses:
        200:
          description: A list of items in the user's cart.
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    id:
                      type: integer
                      example: 101
                    name:
                      type: string
                      example: Superglasses
                    quantity:
                      type: integer
                      example: 2
                    price:
                      type: number
                      format: float
                      example: 150.0
        401:
          description: Unauthorized.

    post:
      summary: Add item to cart
      description: Add a new item or update the quantity of an existing item in the user's cart.
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                newItem:
                  type: object
                  properties:
                    id:
                      type: integer
                      example: 101
                    name:
                      type: string
                      example: Superglasses
                    quantity:
                      type: integer
                      example: 2
                    description:
                      type: string
                      example: The best glasses in the world
                    price:
                      type: number
                      format: float
                      example: 150.0
      responses:
        200:
          description: Item added or updated in the cart.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                  cart:
                    type: array
                    items:
                      type: object
                      properties:
                        id:
                          type: integer
                          example: 101
                        name:
                          type: string
                          example: Superglasses
                        quantity:
                          type: integer
                          example: 2
                        price:
                          type: number
                          format: float
                          example: 150.0
        401:
          description: Unauthorized.

  /cart/{itemId}:
    delete:
      summary: Remove item from cart
      description: Remove an item from the authenticated user's cart by item ID.
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: itemId
          schema:
            type: integer
          required: true
          description: ID of the item to remove from the cart.
      responses:
        200:
          description: Item successfully removed from the cart.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                  cart:
                    type: array
                    items:
                      type: object
                      properties:
                        id:
                          type: integer
                          example: 101
                        name:
                          type: string
                          example: Superglasses
                        quantity:
                          type: integer
                          example: 2
                        price:
                          type: number
                          format: float
                          example: 150.0
        401:
          description: Unauthorized.
        404:
          description: Item not found in cart.

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
